/*
Title: use google apps scripts to make use of IP XML data
Description: creating an RSS feed from IP weekly lists.
Date: 2016/03/11
Type: Tutorial
TutorialComplexity: medium
TutorialSkillsRequired: JavaScript,scripting,XML
TutorialNeeded: a google account
TutorialTime: 2 hours
TutorialType: WebDevelopment
Template: tutorialpage
*/


**This is a tutorial post in preparation for an IP data hack event being held at Manchester Library on 12th March 2016.  The event is being held in a Google Garage so this post uses Google Apps Scripts to integrate with IP weekly XML data,**

Google Apps Scripts

Google Apps Scripts can be created by users as part of Google Drive documents.  The [Google Apps Script](https://developers.google.com/apps-script/) language is primarily JavaScript with a number of additions to simplify common scripting tasks, and integrate with other Google services. For example, you could write a Google apps script that queried your Google calendar and sent you customised alerts about the calendar events (if you needed something outside of the built-in functionality).

Apps scripts can also be deployed as Web Apps(https://developers.google.com/apps-script/guides/web).  These are scripts that are designed to be shared (as a URL) and will serve content in some way to the user, this could either be HTML, or plain text.


IP XML Weekly List

The Intellectual Property Office publish the Patent Journal as a weekly list, downloadable either in PDF or XML format.




Tutorial

This tutorial is designed to demonstrate using a google apps script to query that XML weekly list and convert it into a format that web users are more familiar with consuming - RSS.

The apps script will then be deployed as a web app, allowing it to be shared and accessed as a traditional RSS feed.


To complete the tutorial you will need a Google account.

1. Create a new Google apps script file.

- In your browser, access Google Drive(https://drive.google.com)
- Select to create a new file by New > More > Google Apps Script.

Later, to deploy the script as a webapp it needs to have a method called doGet().  Modify the file to look like the following:

<pre class="prettyprint linenums">
<code>function doGet() {
}</code>
</pre>

2. Accessing the patent data XML

A refreshed XML file is created each week by the IPO and is accessible froma  URL such as:

[]()

Each week the journal will have a week number (in the case above, 6616).

Any code trying to access the latest list then needs to calculate what the current list number is.  For this to be done it needs a reference value.  If we take 6615 as being from Wednesday 10th March, then for any future dates we just need to plus 1 to that number for every full week passed.

When the code has the current Journal ID it can then access the data using the built in method FetchUrl.

<pre class="prettyprint linenums">
<code>




var latestJournal = FetchUrl();

</code>
</pre>


3. Read the data as XML

Fetching the URL will just fetch the raw text data, for the script to actually understand the data as XML and allow you to extract values from it it needs to be explicitly loaded as XML.

This is done using the 

The XML is also split into 4 sections - Applications Filed, 


Merging these all into a single RSS field would be a little unwieldy.  To as a more specific question of the data, how about Applications Filed where the status has become 

(It would be possible of course to create many instances of the script to query different aspects of the data.)


<pre class="prettyprint linenums">
<code>function doGet() {
}</code>
</pre>


4. Create the RSS Feed





5. Deploy as web app.


